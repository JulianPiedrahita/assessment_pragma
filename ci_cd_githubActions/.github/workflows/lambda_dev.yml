name: "CcbLambdaGetSystemDataDate"
on:
  push:
    branches: ["release"]
    paths: ["CCB_LAMBDA_GET_SYSTEM_DATA_DATE/**"]

permissions:
  id-token: write   
  contents: read          
        
jobs:
  
  Build-apigateway-release:
    runs-on: ubuntu-latest
    environment: CcbLambdaGetSystemDataDate
    if: github.ref == 'refs/heads/release'
    defaults:
      run:
        working-directory: .github/workflows/infra/api
    steps:

      - name: Checkout Repo
        uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_RELEASE }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_RELEASE }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN_RELEASE }}
          aws-region: ${{ vars.AWS_REGION }}

      - run: ls
      - run: awk '/servers:/ {flag=1} /paths/{flag=0} !flag' 'api.yaml' > api_new.yaml && mv api_new.yaml 'api.yaml'
      - run: awk -v var1="yappy-cognito-qa:" -v var2="${{ secrets.ID_COGNITO_POOL_RELEASE }}"  '{ gsub(/yappy-cognito-dev:/,var1); gsub(/us-east-1_SU1CBN15W/,var2);}' 'api.yaml' > apiprueba_new.yaml && mv apiprueba_new.yaml 'api.yaml'       
      - run: awk -v var4="${{ secrets.ACCOUNT_ID_RELEASE }}" '{ gsub(/632357775273/,var4); print }' 'api.yaml' > apiprueba_new.yaml && mv apiprueba_new.yaml 'api.yaml'
      #- run: awk -v var1="${{ secrets.API_GATEWAY_ID_RELEASE }}" '{ gsub(/idapi:/,var1); print }' api-deploy.sh > api-deploy-new.sh && mv api-deploy-new.sh api-deploy.sh
      - run: cat api.yaml
      - run: chmod +x api-deploy.sh
      - run: chmod +x getId.sh
      - run: chmod +x getTitle.sh
      - run: ./api-deploy.sh ${{ secrets.API_GATEWAY_ID_RELEASE }}
      #- run: aws apigateway create-deployment --rest-api-id ${{ secrets.API_GATEWAY_ID_RELEASE }} --stage-name ${{ vars.STAGE_NAME_RELEASE }} --description "despliegue automatico  "
      - run: |
          aws apigateway get-rest-apis
      - run: awk -v var1="${{ secrets.API_GATEWAY_ID_RELEASE }}" '{ gsub(/IDAPIGATEWAY:/,var1); print }' api-deploy.sh > api-deploy-new.sh && mv api-deploy-new.sh api-deploy.sh
      - run: aws apigateway create-deployment --rest-api-id ${{ secrets.API_GATEWAY_ID_RELEASE }} --stage-name ${{ vars.STAGE_NAME_RELEASE }} --description "despliegue automatico  "
      - run: aws apigateway update-stage --rest-api-id ${{ secrets.API_GATEWAY_ID_RELEASE }} --stage-name ${{ vars.STAGE_NAME_RELEASE }} --patch-operations op=replace,path=/deploymentId,value=$(aws apigateway get-stages --rest-api-id ${{ secrets.API_GATEWAY_ID_RELEASE }} --query "item[?stageName=='${{ vars.STAGE_NAME_RELEASE }}'].deploymentId" --output text)   
  
      
  Upload-s3-release:
    needs: [Build-apigateway-release]
    runs-on: ubuntu-latest
    environment: CcbLambdaGetSystemDataDate
    if: github.ref == 'refs/heads/release'
    defaults:
      run:
        working-directory: ./CCB_LAMBDA_GET_SYSTEM_DATA_DATE
    steps: 

      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Connect to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_RELEASE }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_RELEASE }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN_RELEASE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Upload Dir to S3 
        run: aws s3 sync ./ s3://ccb-aws-facephi-api/ccb-lambda-get-system-data-date
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_RELEASE }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_RELEASE }}
  
      - name: Git clone the repository
        uses: actions/checkout@v4
  
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.OIDC_GITHUB }}
          role-session-name: samplerolesession
          aws-region: ${{ vars.AWS_REGION }}
  
  Build-deploy-lambda-release:
    needs: [Upload-s3-release]
    runs-on: ubuntu-latest
    environment: CcbLambdaGetSystemDataDate
    if: github.ref == 'refs/heads/release'
    defaults:
      run:
        working-directory: ./CCB_LAMBDA_GET_SYSTEM_DATA_DATE
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
      - uses: aws-actions/setup-sam@v2
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_RELEASE }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_RELEASE }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN_RELEASE }}
          aws-region: ${{ vars.AWS_REGION }}      

      - name: Build an Deploy lambda with sam system data
        run: |
          sam build --use-container
          sam deploy  --config-file ../samconfig_get_system_data.toml --no-confirm-changeset --no-fail-on-empty-changeset --stack-name ${{ vars.STACK_NAME_RELEASE }} 
      - name: Enable Termination Protection
        run: |
          aws cloudformation update-termination-protection --enable-termination-protection --stack-name ${{ vars.STACK_NAME_RELEASE }} --region ${{ vars.AWS_REGION }}
          echo " Configuro update-termination-protection !!"
          aws cloudformation set-stack-policy --stack-name ${{ vars.STACK_NAME_RELEASE }} --stack-policy-body file://../.github/workflows/infra/cloudformation/stack-policy.json
          echo " Configuro update-stack-policy !!" 
      - run: awk -v var1="${{ secrets.ACCOUNT_ID_RELEASE }}" -v var2="${{ vars.AWS_REGION }}" '{ gsub(/account-id/,var1); gsub(/us-east-1/,var2); print }' ../.github/workflows/infra/cloudformation/rollback-config.json > ../.github/workflows/infra/cloudformation/rollback-config_new.json && mv ../.github/workflows/infra/cloudformation/rollback-config_new.json ../.github/workflows/infra/cloudformation/rollback-config.json
      - name: Enable Rollback y SNS 
        run: | 
          stack_status=$(aws cloudformation describe-stacks --stack-name ${{ vars.STACK_NAME_RELEASE }} --query "Stacks[0].StackStatus" --output text)
          if [ "$stack_status" != "UPDATE_COMPLETE" || "$stack_status" != "CREATE_COMPLETE" ]; then
            aws cloudformation create-change-set --stack-name ${{ vars.STACK_NAME_RELEASE }} --change-set-name rollback-change-set --template-body file://template.yaml
            aws cloudformation execute-change-set --change-set-name rollback-change-set
          fi
          

           aws cloudformation update-stack --stack-name ${{ vars.STACK_NAME_RELEASE }} --use-previous-template --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM --rollback-configuration file://../.github/workflows/infra/cloudformation/rollback-config.json
           aws cloudformation describe-stacks --stack-name ${{ vars.STACK_NAME_RELEASE }}
            echo " Configuro rollback y SNS notification options!!"  